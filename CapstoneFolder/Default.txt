클릭 이펙트
난이도
가이드
----------------------------------------------------------------------------------------------------------------
윈도우 녹화: Windows 로고 키+Alt+R

https://blog.naver.com/cheeryun/222301833530
	빠른 시작은 안함
----------------------------------------------------------------------------------------------------------------
에이전트 스크립트 추가하면 느려짐
	레이랑 상관 없음
	onnx 없어도 마찬가지임
----------------------------------------------------------------------------------------------------------------
1)파이썬 3.7.9 다운
           환경 변수(path) 설정, 다운 후, 260자 제한 해제(https://ojui.tistory.com/8)

2)파이썬 패키지 설치
python -m pip install mlagents==0.28.0
입력하면 오류 발생
C:\Users\Happy\AppData\Local\Programs\Python\Python37\python.exe -m pip install --upgrade pip
입력하면 해결된다고 cmd에 뜸
python -m pip install mlagents==0.28.0 다시 입력

3)파이토치
pip3 install torch torchvision torchaudio

4)프로토버프(https://with-rl.tistory.com/entry/Unity-ML-Agent-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0)
pip install --upgrade "protobuf<=3.20.1"

5)식스 다운(https://m.blog.naver.com/PostView.naver?blogId=mdsd12&logNo=222429749302&categoryNo=20&proxyReferer=)
pip install six

6)설치 확인
mlagents-learn --help
가능한 기능이 잘 나오면 성공

7)AttributeError: 'str' object has no attribute '_key'오류 발생 시
pip install importlib-metadata==4.4
------------------------------------------------------------------------------------------------------------
using UnityEngine;
using Lean.Common;
using CW.Common;

namespace Lean.Touch
{
    /// <summary>This component can be added alongside the <b>LeanTouch</b> component to add simulated multi touch controls using the mouse and keyboard.</summary>
    [ExecuteInEditMode]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(LeanTouch))]
	[HelpURL(LeanTouch.HelpUrlPrefix + "LeanTouchSimulator")]
	[AddComponentMenu(LeanTouch.ComponentPathPrefix + "Touch Simulator")]
    public class LeanTouchSimulator : MonoBehaviour
    {
        /// <summary>This allows you to set which key is required to simulate multi key twisting.</summary>
		public KeyCode PinchTwistKey { set { pinchTwistKey = value; } get { return pinchTwistKey; } } [SerializeField] private KeyCode pinchTwistKey = KeyCode.LeftControl;

		/// <summary>This allows you to set which key is required to change the pivot point of the pinch twist gesture.</summary>
		public KeyCode MovePivotKey { set { movePivotKey = value; } get { return movePivotKey; } } [SerializeField] private KeyCode movePivotKey = KeyCode.LeftAlt;

		/// <summary>This allows you to set which key is required to simulate multi key dragging.</summary>
		public KeyCode MultiDragKey { set { multiDragKey = value; } get { return multiDragKey; } } [SerializeField] private KeyCode multiDragKey = KeyCode.LeftAlt;

		/// <summary>This allows you to set which texture will be used to show the simulated fingers.</summary>
		public Texture2D FingerTexture { set { fingerTexture = value; } get { return fingerTexture; } } [SerializeField] private Texture2D fingerTexture;

		// The current pivot (0,0 = bottom left, 1,1 = top right)
		private Vector2 pivot = new Vector2(0.5f, 0.5f);

		[System.NonSerialized]
		private LeanTouch cachedTouch;

#if UNITY_EDITOR
		protected virtual void Reset()
		{
			// Set the finger texture?
			if (FingerTexture == null)
			{
				var guids = UnityEditor.AssetDatabase.FindAssets("FingerVisualization t:texture2d");

				if (guids.Length > 0)
				{
					var path = UnityEditor.AssetDatabase.GUIDToAssetPath(guids[0]);

					FingerTexture = UnityEditor.AssetDatabase.LoadMainAssetAtPath(path) as Texture2D;
				}
			}
		}
#endif

		protected virtual void OnEnable()
		{
			cachedTouch = GetComponent<LeanTouch>();

			cachedTouch.OnSimulateFingers += HandleSimulateFingers;
		}

		protected virtual void OnDisable()
		{
			cachedTouch.OnSimulateFingers -= HandleSimulateFingers;
		}

        public int TextureSize { set { textureSize = value; } get { return textureSize; } }
        [SerializeField][Range(1, 10)] private int textureSize = 1;

        protected virtual void OnGUI()
		{
			// Show simulated multi fingers?
			if (FingerTexture != null)
			{
				var count = 0;

				foreach (var finger in LeanTouch.Fingers)
				{
					if (finger.Index < 0 && finger.Index != LeanTouch.HOVER_FINGER_INDEX)
					{
						count += 1;
					}
				}

				if (count > 1)
				{
					foreach (var finger in LeanTouch.Fingers)
					{
						// Simulated fingers have a negative index
						if (finger.Index < 0)
						{
							var screenPosition = finger.ScreenPosition;
							//var screenRect     = new Rect(0, 0, FingerTexture.width, FingerTexture.height);
                            //크기 수정
                            var screenRect = new Rect(0, 0, FingerTexture.width * TextureSize, FingerTexture.height * TextureSize);
                            screenRect.center = new Vector2(screenPosition.x, Screen.height - screenPosition.y);

							GUI.DrawTexture(screenRect, FingerTexture);
						}
					}
				}
			}
		}

		private void HandleSimulateFingers()
		{
			// Simulate pinch & twist?
			if (CwInput.GetMouseExists() == true && CwInput.GetKeyboardExists() == true)
			{
				var mousePosition = CwInput.GetMousePosition();
				var mouseSet      = false;
				var mouseUp       = false;

				for (var i = 0; i < 5; i++)
				{
					mouseSet |= CwInput.GetMouseIsHeld(i);
					mouseUp  |= CwInput.GetMouseWentUp(i);
				}

				if (mouseSet == true || mouseUp == true)
				{
					if (CwInput.GetKeyIsHeld(MovePivotKey) == true)
					{
						pivot.x = mousePosition.x / Screen.width;
						pivot.y = mousePosition.y / Screen.height;
					}

					if (CwInput.GetKeyIsHeld(PinchTwistKey) == true)
					{
						var center = new Vector2(Screen.width * pivot.x, Screen.height * pivot.y);

						cachedTouch.AddFinger(-2, center - (mousePosition - center), 1.0f, mouseSet);
					}
					// Simulate multi drag?
					else if (CwInput.GetKeyIsHeld(MultiDragKey) == true)
					{
						cachedTouch.AddFinger(-2, mousePosition, 1.0f, mouseSet);
					}
				}
			}
		}
    }
}

#if UNITY_EDITOR
namespace Lean.Touch.Editor
{
	using UnityEditor;
	using TARGET = LeanTouchSimulator;

	[CanEditMultipleObjects]
	[CustomEditor(typeof(TARGET))]
	public class LeanTouchSimulator_Editor : CwEditor
	{
		[InitializeOnLoadMethod]
		static void Hook()
		{
			LeanTouch_Editor.OnExtendInspector += HandleExtendInspector;
		}

        
        protected override void OnInspector()
		{
			TARGET tgt; TARGET[] tgts; GetTargets(out tgt, out tgts);

			Draw("pinchTwistKey", "This allows you to set which key is required to simulate multi key twisting.");
			Draw("movePivotKey", "This allows you to set which key is required to change the pivot point of the pinch twist gesture.");
			Draw("multiDragKey", "This allows you to set which key is required to simulate multi key dragging.");
			Draw("fingerTexture", "This allows you to set which texture will be used to show the simulated fingers.");
            Draw("textureSize", "Description"); //추가
        }

		private static void HandleExtendInspector(LeanTouch touch)
		{
			if (touch.GetComponent<LeanTouchSimulator>() == null)
			{
				if (GUILayout.Button("Add Simulator") == true)
				{
					Undo.AddComponent<LeanTouchSimulator>(touch.gameObject);
				}
			}
		}
	}
}
#endif
------------------------------------------------------------------------------------------------------------

<<컴파일 속도 최적화>>
Project Settings => Editor => Enter Play Mode Options 체크 (활성화)
Reload Domain 체크 해제 (비활성화)
<https://virtualdever.tistory.com/298>

오토 리프레쉬 비활성화
<https://virtualdever.tistory.com/101>